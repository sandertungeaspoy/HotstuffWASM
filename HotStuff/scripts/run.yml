---
- hosts: clients
  gather_facts: no
  vars:
    rate: 10000
    time: 60
    payload: 0
    maxinflight: 2500
    client_id: "{{ inventory_hostname | regex_replace('[^0-9]', '') }}"
    netem_commands: 'true'
  tasks:
    - name: "Start clients"
      shell: >
        docker run
        --rm
        -v {{inventory_hostname}}_hotstuff-data:/data
        -w /data
        --cap-add NET_ADMIN
        raytar/hotstuff
        /bin/sh -c
        '
        {{netem_commands}}
        ;
        hotstuffclient
        --tls
        --self-id {{client_id}}
        --rate-limit {{rate}}
        --exit-after {{time}}
        --payload-size {{payload}}
        --max-inflight {{maxinflight}}
        '
      async: 10000
      poll: 0
      register: clients

- hosts: replicas
  gather_facts: no
  vars:
    batch_size: 100
    view_change: 100
    client_port: 20000
    peer_port: 10000
    netem_commands: 'true'
  tasks:
    - name: Start servers
      shell: >
        docker run
        --name {{inventory_hostname}}_hotstuff-server
        --rm
        -p {{client_port}}:{{client_port}}
        -p {{peer_port}}:{{peer_port}}
        -v {{inventory_hostname}}_hotstuff-data:/data
        -w /data
        --cap-add NET_ADMIN
        raytar/hotstuff
        /bin/sh -c
        '
        {{netem_commands}}
        ;
        hotstuffserver
        --tls
        --config self_config.toml
        --batch-size {{batch_size}}
        --view-change {{view_change}}
        '
      async: 10000
      poll: 0
      register: replicas

- hosts: clients
  gather_facts: no
  tasks:
    - name: "Wait for clients to exit"
      async_status:
        jid: "{{clients.ansible_job_id}}"
      register: clients_result
      until: clients_result.finished
      retries: 30
      ignore_errors: yes

- hosts: replicas
  gather_facts: no
  tasks:
    - name: "Stop servers"
      shell: docker stop -t 3 {{inventory_hostname}}_hotstuff-server
      ignore_errors: yes

- hosts: clients
  gather_facts: no
  tasks:
    - name: "Print results"
      debug: msg={{ clients_result.stdout_lines | join('\n') }}

- hosts: replicas
  gather_facts: no
  tasks:
    - name: Wait for servers to exit"
      async_status:
        jid: "{{replicas.ansible_job_id}}"
      register: replicas_result
      until: replicas_result.finished
      retries: 30
    - name: "Print results"
      debug: msg={{ replicas_result.stdout_lines | join('\n') }}
